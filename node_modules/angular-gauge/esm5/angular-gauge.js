import { Component, ElementRef, EventEmitter, InjectionToken, Input, NgModule, Output } from '@angular/core';
import Gauge from 'svg-gauge';
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */
var GaugeDefaults = /** @class */ (function () {
    function GaugeDefaults() {
        /**
         * The angle in degrees to start the dial
         */
        this.dialStartAngle = 135;
        /**
         * The angle in degrees to end the dial. This MUST be less than dialStartAngle
         */
        this.dialEndAngle = 45;
        /**
         * The radius of the gauge
         */
        this.dialRadius = 40;
        /**
         * The minimum value for the gauge
         */
        this.min = 0;
        /**
         * The maximum value for the gauge
         */
        this.max = 100;
        /**
         * Whether to show the value at the center of the gauge
         */
        this.showValue = true;
        /**
         * The CSS class of the gauge
         */
        this.gaugeClass = 'gauge';
        /**
         * The CSS class of the gauge's dial
         */
        this.dialClass = 'dial';
        /**
         * The CSS class of the gauge's fill (value dial)
         */
        this.valueDialClass = 'value';
        /**
         * 	The CSS class of the gauge's text
         */
        this.valueClass = 'value-text';
        /**
         * Whether to animate changing the gauge
         */
        this.animated = false;
    }
    return GaugeDefaults;
}());
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GaugeComponent = /** @class */ (function () {
    /**
     * @param {?} elm
     * @param {?} defaults
     */
    function GaugeComponent(elm, defaults) {
        this.elm = elm;
        this.defaults = defaults;
        /**
         * Called when the gauge is created
         */
        this.gaugeCreated = new EventEmitter();
    }
    /**
     * @return {?}
     */
    GaugeComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var /** @type {?} */ options = {
            dialStartAngle: this.dialStartAngle,
            dialEndAngle: this.dialEndAngle,
            dialRadius: this.dialRadius,
            min: this.min,
            max: this.max,
            label: this.label,
            showValue: this.showValue,
            gaugeClass: this.gaugeClass,
            dialClass: this.dialClass,
            valueDialClass: this.valueDialClass,
            valueClass: this.valueClass,
            value: this.value,
            color: this.color
        };
        Object.keys(this.defaults).forEach(function (optionKey) {
            if (typeof options[optionKey] === 'undefined') {
                options[optionKey] = _this.defaults[optionKey];
            }
        });
        Object.keys(options).forEach(function (optionKey) {
            if (typeof options[optionKey] === 'undefined') {
                delete options[optionKey];
            }
        });
        this.gauge = Gauge(this.elm.nativeElement, options);
        this.gaugeCreated.emit({ gauge: this.gauge });
        this.updateValue();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    GaugeComponent.prototype.ngOnChanges = function (changes) {
        if (changes['value']) {
            this.updateValue();
        }
    };
    /**
     * @return {?}
     */
    GaugeComponent.prototype.updateValue = function () {
        if (this.gauge) {
            if (this.animated) {
                this.gauge.setValueAnimated(this.value, this.animationDuration);
            }
            else {
                this.gauge.setValue(this.value);
            }
        }
    };
    return GaugeComponent;
}());
GaugeComponent.decorators = [
    { type: Component, args: [{
                selector: 'mwl-gauge',
                template: ''
            },] },
];
/** @nocollapse */
GaugeComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: GaugeDefaults, },
]; };
GaugeComponent.propDecorators = {
    "dialStartAngle": [{ type: Input },],
    "dialEndAngle": [{ type: Input },],
    "dialRadius": [{ type: Input },],
    "min": [{ type: Input },],
    "max": [{ type: Input },],
    "label": [{ type: Input },],
    "color": [{ type: Input },],
    "showValue": [{ type: Input },],
    "gaugeClass": [{ type: Input },],
    "dialClass": [{ type: Input },],
    "valueDialClass": [{ type: Input },],
    "valueClass": [{ type: Input },],
    "value": [{ type: Input },],
    "animated": [{ type: Input },],
    "animationDuration": [{ type: Input },],
    "gaugeCreated": [{ type: Output },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var USER_DEFAULTS = new InjectionToken('gauge defaults');
/**
 * @param {?} userDefaults
 * @return {?}
 */
function defaultsFactory(userDefaults) {
    var /** @type {?} */ defaults = new GaugeDefaults();
    Object.assign(defaults, userDefaults);
    return defaults;
}
var GaugeModule = /** @class */ (function () {
    function GaugeModule() {
    }
    /**
     * @param {?=} userDefaults
     * @return {?}
     */
    GaugeModule.forRoot = function (userDefaults) {
        if (userDefaults === void 0) { userDefaults = {}; }
        return {
            ngModule: GaugeModule,
            providers: [
                {
                    provide: USER_DEFAULTS,
                    useValue: userDefaults
                },
                {
                    provide: GaugeDefaults,
                    useFactory: defaultsFactory,
                    deps: [USER_DEFAULTS]
                }
            ]
        };
    };
    return GaugeModule;
}());
GaugeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [GaugeComponent],
                exports: [GaugeComponent]
            },] },
];
/** @nocollapse */
GaugeModule.ctorParameters = function () { return []; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { USER_DEFAULTS, defaultsFactory, GaugeModule, GaugeDefaults as ɵb, GaugeComponent as ɵa };
//# sourceMappingURL=angular-gauge.js.map
