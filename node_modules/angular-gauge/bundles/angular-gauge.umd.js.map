{
  "version": 3,
  "file": "angular-gauge.umd.js",
  "sources": [
    "ng://angular-gauge/src/gauge.module.ts",
    "ng://angular-gauge/src/gauge.component.ts",
    "ng://angular-gauge/src/gauge-defaults.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\nexport const USER_DEFAULTS: InjectionToken<string> = new InjectionToken(\n  'gauge defaults'\n);\n\nexport function defaultsFactory(userDefaults: GaugeOptions): GaugeDefaults {\n  const defaults: GaugeDefaults = new GaugeDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [GaugeComponent],\n  exports: [GaugeComponent]\n})\nexport class GaugeModule {\n  static forRoot(userDefaults: GaugeOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: GaugeModule,\n      providers: [\n        {\n          provide: USER_DEFAULTS,\n          useValue: userDefaults\n        },\n        {\n          provide: GaugeDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS]\n        }\n      ]\n    };\n  }\n}\n",
    "import {\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport Gauge from 'svg-gauge';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\n@Component({\n  selector: 'mwl-gauge',\n  template: ''\n})\nexport class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  @Input() dialStartAngle: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  @Input() dialEndAngle: number;\n\n  /**\n   * The radius of the gauge\n   */\n  @Input() dialRadius: number;\n\n  /**\n   * The minimum value for the gauge\n   */\n  @Input() min: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  @Input() max: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  @Input() label: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  @Input() color: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  @Input() showValue: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  @Input() gaugeClass: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  @Input() dialClass: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  @Input() valueDialClass: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  @Input() valueClass: string;\n\n  /**\n   * The value of the gauge\n   */\n  @Input() value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  @Input() animated: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  @Input() animationDuration: number;\n\n  /**\n   * Called when the gauge is created\n   */\n  @Output() gaugeCreated: EventEmitter<{ gauge: any }> = new EventEmitter();\n\n  private gauge: any;\n\n  constructor(private elm: ElementRef, private defaults: GaugeDefaults) {}\n\n  ngAfterViewInit(): void {\n    const options: GaugeOptions = {\n      dialStartAngle: this.dialStartAngle,\n      dialEndAngle: this.dialEndAngle,\n      dialRadius: this.dialRadius,\n      min: this.min,\n      max: this.max,\n      label: this.label,\n      showValue: this.showValue,\n      gaugeClass: this.gaugeClass,\n      dialClass: this.dialClass,\n      valueDialClass: this.valueDialClass,\n      valueClass: this.valueClass,\n      value: this.value,\n      color: this.color\n    };\n\n    Object.keys(this.defaults).forEach(optionKey => {\n      if (typeof options[optionKey] === 'undefined') {\n        options[optionKey] = this.defaults[optionKey];\n      }\n    });\n\n    Object.keys(options).forEach(optionKey => {\n      if (typeof options[optionKey] === 'undefined') {\n        delete options[optionKey];\n      }\n    });\n\n    this.gauge = Gauge(this.elm.nativeElement, options);\n\n    this.gaugeCreated.emit({ gauge: this.gauge });\n\n    this.updateValue();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['value']) {\n      this.updateValue();\n    }\n  }\n\n  private updateValue(): void {\n    if (this.gauge) {\n      if (this.animated) {\n        this.gauge.setValueAnimated(this.value, this.animationDuration);\n      } else {\n        this.gauge.setValue(this.value);\n      }\n    }\n  }\n}\n",
    "export interface GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle?: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle?: number;\n\n  /**\n   * The radius of the gauge\n   */\n  dialRadius?: number;\n\n  /**\n   * The minumum value for the gauge\n   */\n  min?: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max?: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label?: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  color?: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue?: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass?: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass?: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass?: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueClass?: string;\n\n  /**\n   * The value of the gauge\n   */\n  value?: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated?: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration?: number;\n}\n\nexport class GaugeDefaults implements GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle: number = 135;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle: number = 45;\n\n  /**\n   * The radius of the gauge\n   */\n  dialRadius: number = 40;\n\n  /**\n   * The minimum value for the gauge\n   */\n  min: number = 0;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max: number = 100;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  color: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue: boolean = true;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass: string = 'gauge';\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass: string = 'dial';\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass: string = 'value';\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueClass: string = 'value-text';\n\n  /**\n   * The value of the gauge\n   */\n  value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated: boolean = false;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration: number;\n}\n"
  ],
  "names": [
    "NgModule",
    "Output",
    "Input",
    "ElementRef",
    "Component"
  ],
  "mappings": "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"
}
