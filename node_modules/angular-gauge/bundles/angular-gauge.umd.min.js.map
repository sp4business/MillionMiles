{
  "version": 3,
  "file": "angular-gauge.umd.min.js",
  "sources": [
    "ng://angular-gauge/src/gauge-defaults.service.ts",
    "ng://angular-gauge/src/gauge.component.ts",
    "ng://angular-gauge/src/gauge.module.ts"
  ],
  "sourcesContent": [
    "export interface GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle?: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle?: number;\n\n  /**\n   * The radius of the gauge\n   */\n  dialRadius?: number;\n\n  /**\n   * The minumum value for the gauge\n   */\n  min?: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max?: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label?: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  color?: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue?: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass?: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass?: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass?: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueClass?: string;\n\n  /**\n   * The value of the gauge\n   */\n  value?: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated?: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration?: number;\n}\n\nexport class GaugeDefaults implements GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  dialStartAngle: number = 135;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  dialEndAngle: number = 45;\n\n  /**\n   * The radius of the gauge\n   */\n  dialRadius: number = 40;\n\n  /**\n   * The minimum value for the gauge\n   */\n  min: number = 0;\n\n  /**\n   * The maximum value for the gauge\n   */\n  max: number = 100;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  label: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  color: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  showValue: boolean = true;\n\n  /**\n   * The CSS class of the gauge\n   */\n  gaugeClass: string = 'gauge';\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  dialClass: string = 'dial';\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  valueDialClass: string = 'value';\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  valueClass: string = 'value-text';\n\n  /**\n   * The value of the gauge\n   */\n  value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  animated: boolean = false;\n\n  /**\n   * Animation duration in seconds\n   */\n  animationDuration: number;\n}\n",
    "import {\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport Gauge from 'svg-gauge';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\n@Component({\n  selector: 'mwl-gauge',\n  template: ''\n})\nexport class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {\n  /**\n   * The angle in degrees to start the dial\n   */\n  @Input() dialStartAngle: number;\n\n  /**\n   * The angle in degrees to end the dial. This MUST be less than dialStartAngle\n   */\n  @Input() dialEndAngle: number;\n\n  /**\n   * The radius of the gauge\n   */\n  @Input() dialRadius: number;\n\n  /**\n   * The minimum value for the gauge\n   */\n  @Input() min: number;\n\n  /**\n   * The maximum value for the gauge\n   */\n  @Input() max: number;\n\n  /**\n   * Function that returns a string label that will be rendered in the center. This function will be passed the current value\n   */\n  @Input() label: (value: number) => string;\n\n  /**\n   * Function that returns a string color value for the gauge''s fill (value dial)\n   */\n  @Input() color: (value: number) => string;\n\n  /**\n   * Whether to show the value at the center of the gauge\n   */\n  @Input() showValue: boolean;\n\n  /**\n   * The CSS class of the gauge\n   */\n  @Input() gaugeClass: string;\n\n  /**\n   * The CSS class of the gauge's dial\n   */\n  @Input() dialClass: string;\n\n  /**\n   * The CSS class of the gauge's fill (value dial)\n   */\n  @Input() valueDialClass: string;\n\n  /**\n   * \tThe CSS class of the gauge's text\n   */\n  @Input() valueClass: string;\n\n  /**\n   * The value of the gauge\n   */\n  @Input() value: number;\n\n  /**\n   * Whether to animate changing the gauge\n   */\n  @Input() animated: boolean;\n\n  /**\n   * Animation duration in seconds\n   */\n  @Input() animationDuration: number;\n\n  /**\n   * Called when the gauge is created\n   */\n  @Output() gaugeCreated: EventEmitter<{ gauge: any }> = new EventEmitter();\n\n  private gauge: any;\n\n  constructor(private elm: ElementRef, private defaults: GaugeDefaults) {}\n\n  ngAfterViewInit(): void {\n    const options: GaugeOptions = {\n      dialStartAngle: this.dialStartAngle,\n      dialEndAngle: this.dialEndAngle,\n      dialRadius: this.dialRadius,\n      min: this.min,\n      max: this.max,\n      label: this.label,\n      showValue: this.showValue,\n      gaugeClass: this.gaugeClass,\n      dialClass: this.dialClass,\n      valueDialClass: this.valueDialClass,\n      valueClass: this.valueClass,\n      value: this.value,\n      color: this.color\n    };\n\n    Object.keys(this.defaults).forEach(optionKey => {\n      if (typeof options[optionKey] === 'undefined') {\n        options[optionKey] = this.defaults[optionKey];\n      }\n    });\n\n    Object.keys(options).forEach(optionKey => {\n      if (typeof options[optionKey] === 'undefined') {\n        delete options[optionKey];\n      }\n    });\n\n    this.gauge = Gauge(this.elm.nativeElement, options);\n\n    this.gaugeCreated.emit({ gauge: this.gauge });\n\n    this.updateValue();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['value']) {\n      this.updateValue();\n    }\n  }\n\n  private updateValue(): void {\n    if (this.gauge) {\n      if (this.animated) {\n        this.gauge.setValueAnimated(this.value, this.animationDuration);\n      } else {\n        this.gauge.setValue(this.value);\n      }\n    }\n  }\n}\n",
    "import { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';\n\nexport const USER_DEFAULTS: InjectionToken<string> = new InjectionToken(\n  'gauge defaults'\n);\n\nexport function defaultsFactory(userDefaults: GaugeOptions): GaugeDefaults {\n  const defaults: GaugeDefaults = new GaugeDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [GaugeComponent],\n  exports: [GaugeComponent]\n})\nexport class GaugeModule {\n  static forRoot(userDefaults: GaugeOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: GaugeModule,\n      providers: [\n        {\n          provide: USER_DEFAULTS,\n          useValue: userDefaults\n        },\n        {\n          provide: GaugeDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS]\n        }\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "this",
    "defaults",
    "options",
    "dialStartAngle",
    "dialEndAngle",
    "dialRadius",
    "min",
    "max",
    "label",
    "showValue",
    "gaugeClass",
    "dialClass",
    "valueDialClass",
    "valueClass",
    "value",
    "color",
    "Object",
    "keys",
    "forEach",
    "optionKey",
    "_this",
    "gauge",
    "Gauge",
    "elm",
    "nativeElement",
    "gaugeCreated",
    "emit",
    "updateValue",
    "changes",
    "animated",
    "setValueAnimated",
    "animationDuration",
    "setValue",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "ElementRef",
    "GaugeDefaults",
    "Input",
    "Output",
    "assign",
    "userDefaults",
    "GaugeModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "USER_DEFAULTS",
    "useValue",
    "useFactory",
    "defaultsFactory",
    "deps",
    "decorators",
    "NgModule"
  ],
  "mappings": "oWAkJA,gSC9CAA,KAAAC,SAAAA,gGAEAC,GACAC,eAAAH,KAAAG,eACMC,aAAcJ,KAApBI,aACMC,WAAYL,KAAlBK,WACMC,IAANN,KAAgBM,IACVC,IAAKP,KAAKO,IACVC,MAANR,KAAAQ,MACMC,UAAWT,KAAjBS,UACMC,WAANV,KAAAU,WACMC,UAANX,KAAsBW,UAChBC,eAAgBZ,KAAtBY,eACMC,WAANb,KAAAa,WACMC,MAANd,KAAkBc,MACZC,MAAOf,KAAKe,OAElBC,OAAAC,KAAAjB,KAAAC,UAAAiB,QAAA,SAAAC,GAEA,oBAAAjB,EAAAiB,KACUjB,EAAViB,GAAAC,EAAAnB,SAAAkB,MAGAH,OAAAC,KAAAf,GAAAgB,QAAA,SAAAC,GAE0C,oBAA1CjB,EAAAiB,WACiBjB,EAAQiB,KAGzBnB,KAAAqB,MAAAC,EAAAtB,KAAAuB,IAAAC,cAAAtB,GAEIF,KAAKyB,aAAaC,MAAtBL,MAAArB,KAAAqB,QAEIrB,KAAK2B,mDAKTC,EAAA,OACQ5B,KAAR2B,kDAKA3B,KAAAqB,QACYrB,KAAZ6B,SACU7B,KAAKqB,MAAfS,iBAAA9B,KAAAc,MAAAd,KAAA+B,mBAEA/B,KAAAqB,MAAAW,SAAAhC,KAAAc,6BAvIAmB,KAACC,EAAAA,UAADC,OACEC,SAAU,YACVC,SAAU,2CAbZJ,KAAEK,EAAAA,aASFL,KAASM,uBAUTpC,iBAAA8B,KAAGO,EAAAA,QAKHpC,eAAA6B,KAAGO,EAAAA,QAKHnC,aAAA4B,KAAGO,EAAAA,QAKHlC,MAAA2B,KAAGO,EAAAA,QAKHjC,MAAA0B,KAAGO,EAAAA,QAKHhC,QAAAyB,KAAGO,EAAAA,QAKHzB,QAAAkB,KAAGO,EAAAA,QAKH/B,YAAAwB,KAAGO,EAAAA,QAKH9B,aAAAuB,KAAGO,EAAAA,QAKH7B,YAAAsB,KAAGO,EAAAA,QAKH5B,iBAAAqB,KAAGO,EAAAA,QAKH3B,aAAAoB,KAAGO,EAAAA,QAKH1B,QAAAmB,KAAGO,EAAAA,QAKHX,WAAAI,KAAGO,EAAAA,QAKHT,oBAAAE,KAAGO,EAAAA,QAKHf,eAAAQ,KAAGQ,EAAAA,qECxFH,IAAgCxC,EAAhC,IAAAsC,EAEE,OADAvB,OAAF0B,OAAAzC,EAAA0C,GACS1C,EAET,IAAA2C,EAAA,WAMA,SAAAA,KAJA,OAMAA,EAAAC,QAAA,SAAAF,GAEA,YADA,IAAMA,IAANA,OAEAG,SAAAF,EACAG,YAEAC,QAAAC,EACAC,SAAAP,IAGUK,QAAVT,EACAY,WAAAC,EACAC,MAAAJ,OAlBAL,EAFA,GAIAA,EAAAU,aACArB,KAAAsB,EAAAA,SAAApB"
}
